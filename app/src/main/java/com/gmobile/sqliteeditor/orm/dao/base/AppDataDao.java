package com.gmobile.sqliteeditor.orm.dao.base;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gmobile.sqliteeditor.orm.dao.model.AppData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_DATA".
*/
public class AppDataDao extends AbstractDao<AppData, Long> {

    public static final String TABLENAME = "APP_DATA";

    /**
     * Properties of entity AppData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property AppPackageName = new Property(2, String.class, "appPackageName", false, "APP_PACKAGE_NAME");
        public final static Property LastModified = new Property(3, Long.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property IsSystem = new Property(4, Integer.class, "isSystem", false, "IS_SYSTEM");
    };


    public AppDataDao(DaoConfig config) {
        super(config);
    }
    
    public AppDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_NAME\" TEXT," + // 1: appName
                "\"APP_PACKAGE_NAME\" TEXT UNIQUE ," + // 2: appPackageName
                "\"LAST_MODIFIED\" INTEGER," + // 3: lastModified
                "\"IS_SYSTEM\" INTEGER);"); // 4: isSystem
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        String appPackageName = entity.getAppPackageName();
        if (appPackageName != null) {
            stmt.bindString(3, appPackageName);
        }
 
        Long lastModified = entity.getLastModified();
        if (lastModified != null) {
            stmt.bindLong(4, lastModified);
        }
 
        Integer isSystem = entity.getIsSystem();
        if (isSystem != null) {
            stmt.bindLong(5, isSystem);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppData readEntity(Cursor cursor, int offset) {
        AppData entity = new AppData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appPackageName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lastModified
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // isSystem
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastModified(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIsSystem(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
